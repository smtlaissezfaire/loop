(define-macro
  (let ((name value) ...)
    body ...)
  ((function (name ...)
    body ...) value ...))

(define loop (require './../loop'))
(define jsp (require 'uglify-js').parser)
(define pro (require 'uglify-js').uglify)

(let ((compiler {}))
  (= compiler.compile
    (function (str options)
      (if (=== (typeof options) 'undefined')
        (= options {}))

      // TODO: convert to letrec?
      (define macroTransformedAst (loop.macroTransform (loop.parse str)))
      (define ast (loop.loopEval macroTransformedAst))
      (define uglifyAst (loop.toUglifyTree ast))

      (if options.mangle
        (= uglifyAst (pro.ast_mangle ast)))

      (if options.squeeze
        (= uglifyAst (pro.ast_squeeze ast)))

      // compressed code here
      (return (pro.gen_code uglifyAst options))))

  (= module.exports compiler))


